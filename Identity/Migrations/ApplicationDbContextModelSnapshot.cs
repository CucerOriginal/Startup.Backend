// <auto-generated />
using System;
using Identity.DbContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Identity.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("BlogSN.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Category");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "ИТ",
                            Name = "ИТ"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Транспорт",
                            Name = "Транспорт"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Закупки",
                            Name = "Закупки"
                        },
                        new
                        {
                            Id = 4,
                            Description = "Финансы",
                            Name = "Финансы"
                        },
                        new
                        {
                            Id = 5,
                            Description = "Медицина",
                            Name = "Медицина"
                        },
                        new
                        {
                            Id = 6,
                            Description = "Рабочий персонал",
                            Name = "Рабочий персонал"
                        },
                        new
                        {
                            Id = 7,
                            Description = "Юристы",
                            Name = "Юристы"
                        },
                        new
                        {
                            Id = 8,
                            Description = "Искусство",
                            Name = "Искусство"
                        },
                        new
                        {
                            Id = 9,
                            Description = "Производство",
                            Name = "Производство"
                        });
                });

            modelBuilder.Entity("BlogSN.Models.Post", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("CategoryId")
                        .HasColumnType("integer");

                    b.Property<string>("Content")
                        .HasColumnType("text");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("EmployerId")
                        .HasColumnType("text");

                    b.Property<double>("Salary")
                        .HasColumnType("double precision");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("EmployerId");

                    b.ToTable("Post");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 1,
                            Content = "Что от Вас требуется? Знание основ SQL, 1С (выбор, связи, вложенные запросы); Аналитический склад ума; Стремление к саморазвитию; Инициативность, желание искать новые инструменты и пути решения поставленных задач.",
                            DateCreated = new DateTime(2023, 4, 22, 15, 55, 33, 162, DateTimeKind.Utc).AddTicks(5623),
                            Description = "Требуемый опыт работы: 1–3 года Полная занятость, полный день",
                            EmployerId = "88aec81d-b5b0-43f3-8721-8d21560b02a7",
                            Salary = 40000.0,
                            Title = "Младший программист"
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 1,
                            Content = "Требования: - C# + .NET 4.7 с опытом разработки не менее 2 лет - ООП - уверенное владение. - Опыт разработки desktop приложений (Windows). - Многопоточные приложения - уверенное владение. - WPF - уверенное владение - знание MVVM, понимание принципов SOLID, DI Будет плюсом: WinForms, Unity, Prism",
                            DateCreated = new DateTime(2023, 4, 22, 15, 55, 33, 162, DateTimeKind.Utc).AddTicks(5626),
                            Description = "Требуемый опыт работы: 1–3 года Полная занятость, гибкий график",
                            EmployerId = "88aec81d-b5b0-43f3-8721-8d21560b02a7",
                            Salary = 100000.0,
                            Title = "Программист С# (middle)"
                        },
                        new
                        {
                            Id = 3,
                            CategoryId = 1,
                            Content = "Требования: Уверенные знания C#; Знание ASP.NET Core; Знание SQL, опыт работы с MSSQL, PostgreSQL; Entity Framework Core; Понимание ООП; Знать и применять на практике шаблоны проектирования; Опыт разработки REST API; Опыт работы с GIT.",
                            DateCreated = new DateTime(2023, 4, 22, 15, 55, 33, 162, DateTimeKind.Utc).AddTicks(5627),
                            Description = "Требуемый опыт работы: 1–3 года Полная занятость, удаленная работа",
                            EmployerId = "88aec81d-b5b0-43f3-8721-8d21560b02a7",
                            Salary = 160000.0,
                            Title = "Разработчик C# (Middle)"
                        },
                        new
                        {
                            Id = 4,
                            CategoryId = 2,
                            Content = "Требования: Опыт вождения от 1 года; Владение управлением грузовой техники; Знание Москвы и Московской области; Наличие водительских прав категории B и C; Опыт работы в экспедиции.",
                            DateCreated = new DateTime(2023, 4, 22, 15, 55, 33, 162, DateTimeKind.Utc).AddTicks(5629),
                            Description = "Требуемый опыт работы: от 1 года Полная занятость, график 5/2",
                            EmployerId = "88aec81d-b5b0-43f3-8721-8d21560b0288",
                            Salary = 50000.0,
                            Title = "Водитель-экспедитор"
                        },
                        new
                        {
                            Id = 5,
                            CategoryId = 5,
                            Content = "Требования: Опыт работы терапевтом от 3 лет; Знание современных методик диагностики и лечения заболеваний; Коммуникабельность, умение налаживать контакт с пациентами.",
                            DateCreated = new DateTime(2023, 4, 22, 15, 55, 33, 162, DateTimeKind.Utc).AddTicks(5630),
                            Description = "Требуемый опыт работы: от 3 лет Полная занятость, график посменный",
                            EmployerId = "88aec81d-b5b0-43f3-8721-8d21560b02a9",
                            Salary = 150000.0,
                            Title = "Врач-терапевт"
                        },
                        new
                        {
                            Id = 6,
                            CategoryId = 7,
                            Content = "Требования: Опыт работы юристом от 2 лет; Знание гражданского, трудового, налогового, корпоративного права; Опыт ведения переговоров; Уверенный пользователь ПК, знание офисных программ.",
                            DateCreated = new DateTime(2023, 4, 22, 15, 55, 33, 162, DateTimeKind.Utc).AddTicks(5631),
                            Description = "Требуемый опыт работы: от 2 лет Полная занятость, график 5/2",
                            EmployerId = "88aec81d-b5b0-43f3-8721-8d21560b02b0",
                            Salary = 100000.0,
                            Title = "Юрист-консультант"
                        },
                        new
                        {
                            Id = 7,
                            CategoryId = 9,
                            Content = "Требования: Опыт работы инженером-технологом от 3 лет; Знание технологий машиностроения; Навыки проектирования и внедрения технологических процессов; Знание нормативной документации по организации производства.",
                            DateCreated = new DateTime(2023, 4, 22, 15, 55, 33, 162, DateTimeKind.Utc).AddTicks(5632),
                            Description = "Требуемый опыт работы: от 3 лет Полная занятость, график 5/2",
                            EmployerId = "88aec81d-b5b0-43f3-8721-8d21560b02a8",
                            Salary = 120000.0,
                            Title = "Инженер-технолог"
                        },
                        new
                        {
                            Id = 8,
                            CategoryId = 2,
                            Content = "Требования: Категория В, С; Опыт экспедиторской работы не менее 3 лет; Знание города и области; Умение работать с документами; Ответственность, пунктуальность.",
                            DateCreated = new DateTime(2023, 4, 22, 15, 55, 33, 162, DateTimeKind.Utc).AddTicks(5633),
                            Description = "Требуемый опыт работы: от 3 лет, Полная занятость, гибкий график",
                            EmployerId = "88aec81d-b5b0-43f3-8721-8d21560b0288",
                            Salary = 50000.0,
                            Title = "Водитель-экспедитор"
                        },
                        new
                        {
                            Id = 9,
                            CategoryId = 5,
                            Content = "Требования: Высшее медицинское образование; Стаж работы от 3 лет; Владение методами диагностики и лечения заболеваний; Навыки взаимодействия с пациентами; Знание медицинской терминологии.",
                            DateCreated = new DateTime(2023, 4, 22, 15, 55, 33, 162, DateTimeKind.Utc).AddTicks(5635),
                            Description = "Требуемый опыт работы: от 3 лет, Полная занятость, график 5/2",
                            EmployerId = "88aec81d-b5b0-43f3-8721-8d21560b02a9",
                            Salary = 80000.0,
                            Title = "Врач-терапевт"
                        },
                        new
                        {
                            Id = 10,
                            CategoryId = 7,
                            Content = "Требования: Высшее юридическое образование; Опыт работы не менее 2 лет; Знание трудового законодательства, налогового права; Уверенное владение гражданским и арбитражным законодательством; Опыт ведения дел в суде; Навыки составления правовых документов.",
                            DateCreated = new DateTime(2023, 4, 22, 15, 55, 33, 162, DateTimeKind.Utc).AddTicks(5636),
                            Description = "Требуемый опыт работы: от 2 лет, Полная занятость, гибкий график",
                            EmployerId = "88aec81d-b5b0-43f3-8721-8d21560b02b0",
                            Salary = 90000.0,
                            Title = "Юрист-консультант"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Models.ModelsBlogSN.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ApplicantId")
                        .HasColumnType("text");

                    b.Property<string>("Content")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("EmployerId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ApplicantId");

                    b.HasIndex("EmployerId");

                    b.ToTable("Comment");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ApplicantId = "88aec81d-b5b0-45f3-0721-1241560b01f7",
                            Content = "Норм тема",
                            CreatedDate = new DateTime(2023, 4, 22, 15, 55, 33, 162, DateTimeKind.Utc).AddTicks(5656),
                            EmployerId = "88aec81d-b5b0-43f3-8721-8d21560b02a7"
                        },
                        new
                        {
                            Id = 2,
                            ApplicantId = "88aec81d-b5b0-45f3-0721-1241560b01f7",
                            Content = "Хорошее место для работы",
                            CreatedDate = new DateTime(2023, 4, 22, 15, 55, 33, 162, DateTimeKind.Utc).AddTicks(5657),
                            EmployerId = "88aec81d-b5b0-43f3-8721-8d21560b02a8"
                        },
                        new
                        {
                            Id = 3,
                            ApplicantId = "88aec81d-b5b0-45f3-0721-1241560b01f7",
                            Content = "Отличная команда, интересные проекты",
                            CreatedDate = new DateTime(2023, 4, 22, 15, 55, 33, 162, DateTimeKind.Utc).AddTicks(5658),
                            EmployerId = "88aec81d-b5b0-43f3-8721-8d21560b0288"
                        },
                        new
                        {
                            Id = 4,
                            ApplicantId = "88aec81d-b5b0-45f3-0721-1241560b02fa",
                            Content = "Организация современная, все на высшем уровне",
                            CreatedDate = new DateTime(2023, 4, 22, 15, 55, 33, 162, DateTimeKind.Utc).AddTicks(5660),
                            EmployerId = "88aec81d-b5b0-43f3-8721-8d21560b02a7"
                        },
                        new
                        {
                            Id = 5,
                            ApplicantId = "88aec81d-b5b0-45f3-0721-1241560b02f9",
                            Content = "Руководство компетентное, всегда можно рассчитывать на поддержку",
                            CreatedDate = new DateTime(2023, 4, 22, 15, 55, 33, 162, DateTimeKind.Utc).AddTicks(5661),
                            EmployerId = "88aec81d-b5b0-43f3-8721-8d21560b0288"
                        });
                });

            modelBuilder.Entity("Models.ModelsBlogSN.Feedback", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ApplicantId")
                        .HasColumnType("text");

                    b.Property<int>("PostId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ApplicantId");

                    b.HasIndex("PostId");

                    b.ToTable("Feedback");

                    b.HasData(
                        new
                        {
                            Id = "188aec81d-b5b0-45f3-0721-1241560b01f7",
                            ApplicantId = "88aec81d-b5b0-45f3-0721-1241560b01f7",
                            PostId = 1
                        },
                        new
                        {
                            Id = "188aec81d-b5b0-45f3-0721-1241560b02f8",
                            ApplicantId = "88aec81d-b5b0-45f3-0721-1241560b02f8",
                            PostId = 1
                        },
                        new
                        {
                            Id = "288aec81d-b5b0-45f3-0721-1241560b01f7",
                            ApplicantId = "88aec81d-b5b0-45f3-0721-1241560b01f7",
                            PostId = 2
                        },
                        new
                        {
                            Id = "388aec81d-b5b0-45f3-0721-1241560b01f7",
                            ApplicantId = "88aec81d-b5b0-45f3-0721-1241560b01f7",
                            PostId = 3
                        },
                        new
                        {
                            Id = "488aec81d-b5b0-45f3-0721-1241560b02f9",
                            ApplicantId = "88aec81d-b5b0-45f3-0721-1241560b02f9",
                            PostId = 4
                        });
                });

            modelBuilder.Entity("Models.ModelsBlogSN.Rating", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ApplicantId")
                        .HasColumnType("text");

                    b.Property<string>("EmployerId")
                        .HasColumnType("text");

                    b.Property<bool>("LikeStatus")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("ApplicantId");

                    b.HasIndex("EmployerId");

                    b.ToTable("Rating");

                    b.HasData(
                        new
                        {
                            Id = "88aec81d-b5b0-43f3-8721-8d21560b02a788aec81d-b5b0-45f3-0721-1241560b01f7",
                            ApplicantId = "88aec81d-b5b0-45f3-0721-1241560b01f7",
                            EmployerId = "88aec81d-b5b0-43f3-8721-8d21560b02a7",
                            LikeStatus = true
                        },
                        new
                        {
                            Id = "88aec81d-b5b0-43f3-8721-8d21560b02a788aec81d-b5b0-45f3-0721-1241560b02f9",
                            ApplicantId = "88aec81d-b5b0-45f3-0721-1241560b02f8",
                            EmployerId = "88aec81d-b5b0-43f3-8721-8d21560b02a7",
                            LikeStatus = false
                        },
                        new
                        {
                            Id = "88aec81d-b5b0-43f3-8721-8d21560b02a788aec81d-b5b0-45f3-0721-1241560b02f8",
                            ApplicantId = "88aec81d-b5b0-45f3-0721-1241560b02f9",
                            EmployerId = "88aec81d-b5b0-43f3-8721-8d21560b02a7",
                            LikeStatus = true
                        },
                        new
                        {
                            Id = "88aec81d-b5b0-43f3-8721-8d21560b02a988aec81d-b5b0-45f3-0721-1241560b02f7",
                            ApplicantId = "88aec81d-b5b0-45f3-0721-1241560b02f9",
                            EmployerId = "88aec81d-b5b0-43f3-8721-8d21560b02a9",
                            LikeStatus = true
                        },
                        new
                        {
                            Id = "88aec81d-b5b0-43f3-8721-8d21560b02b088aec81d-b5b0-45f3-0721-1241560b02f7",
                            ApplicantId = "88aec81d-b5b0-45f3-0721-1241560b02f9",
                            EmployerId = "88aec81d-b5b0-43f3-8721-8d21560b02b0",
                            LikeStatus = false
                        });
                });

            modelBuilder.Entity("Models.ModelsIdentity.IdentityAuth.Applicant", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Requisite")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Applicant");

                    b.HasData(
                        new
                        {
                            Id = "88aec81d-b5b0-45f3-0721-1241560b01f7"
                        },
                        new
                        {
                            Id = "88aec81d-b5b0-45f3-0721-1241560b02f8"
                        },
                        new
                        {
                            Id = "88aec81d-b5b0-45f3-0721-1241560b02f9"
                        },
                        new
                        {
                            Id = "88aec81d-b5b0-45f3-0721-1241560b02fa"
                        },
                        new
                        {
                            Id = "88aec81d-b5b0-45f3-0721-1241560b02fb"
                        });
                });

            modelBuilder.Entity("Models.ModelsIdentity.IdentityAuth.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ApplicantId")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("EmployerId")
                        .HasColumnType("text");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("Role")
                        .HasColumnType("text");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("ApplicantId")
                        .IsUnique();

                    b.HasIndex("EmployerId")
                        .IsUnique();

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "88aec81d-b5b0-45f3-8721-8d41560b02f7",
                            AccessFailedCount = 0,
                            ApplicantId = "88aec81d-b5b0-45f3-0721-1241560b01f7",
                            ConcurrencyStamp = "f5215daa-589b-415f-932f-a8851355c22a",
                            Email = "vanya@mail.ru",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "EtoHash",
                            PhoneNumberConfirmed = false,
                            Role = "Applicant",
                            SecurityStamp = "326c53fe-a49e-4712-b76c-c7cd95c85b2a",
                            TwoFactorEnabled = false,
                            UserName = "Ваня"
                        },
                        new
                        {
                            Id = "88aec81d-b5b0-45f3-8721-8d41560b0111",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e7cb5ee3-5a1e-4dfd-b670-9ba46bcd9f6a",
                            Email = "ivan@mail.ru",
                            EmailConfirmed = false,
                            EmployerId = "88aec81d-b5b0-43f3-8721-8d21560b02a7",
                            LockoutEnabled = false,
                            PasswordHash = "EtoHash",
                            PhoneNumberConfirmed = false,
                            Role = "Employer",
                            SecurityStamp = "f7a8197b-6bdf-441d-9412-816b8c8cf1ca",
                            TwoFactorEnabled = false,
                            UserName = "Иван"
                        },
                        new
                        {
                            Id = "88aec81d-b5b0-45f3-8721-8d41560b0222",
                            AccessFailedCount = 0,
                            ApplicantId = "88aec81d-b5b0-45f3-0721-1241560b02f8",
                            ConcurrencyStamp = "582525a3-2785-4d25-8128-11b31e18c522",
                            Email = "katya@mail.ru",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "EtoHash",
                            PhoneNumberConfirmed = false,
                            Role = "Applicant",
                            SecurityStamp = "a942ebf2-8da6-4464-9de0-9195aabd26c7",
                            TwoFactorEnabled = false,
                            UserName = "Катя"
                        },
                        new
                        {
                            Id = "88aec81d-b5b0-45f3-8721-8d41560b0333",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "5892d094-fc8f-4893-830d-ef767db94d18",
                            Email = "peter@mail.ru",
                            EmailConfirmed = false,
                            EmployerId = "88aec81d-b5b0-43f3-8721-8d21560b02a8",
                            LockoutEnabled = false,
                            PasswordHash = "EtoHash",
                            PhoneNumberConfirmed = false,
                            Role = "Employer",
                            SecurityStamp = "4b5c5a77-a4c7-4fae-ae0c-d69ba7b4eea7",
                            TwoFactorEnabled = false,
                            UserName = "Петр"
                        },
                        new
                        {
                            Id = "88aec81d-b5b0-45f3-8721-8d41560b0444",
                            AccessFailedCount = 0,
                            ApplicantId = "88aec81d-b5b0-45f3-0721-1241560b02f9",
                            ConcurrencyStamp = "ffe9082e-ea1f-4ef4-9bfc-41132d18cb9e",
                            Email = "anna@mail.ru",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "EtoHash",
                            PhoneNumberConfirmed = false,
                            Role = "Applicant",
                            SecurityStamp = "68da4367-f008-4c93-91e0-316ec512ffd8",
                            TwoFactorEnabled = false,
                            UserName = "Анна"
                        },
                        new
                        {
                            Id = "88aec81d-b5b0-45f3-8721-8d41560b0555",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "1cfcb260-a664-4e78-be88-2bceac177042",
                            Email = "maria@mail.ru",
                            EmailConfirmed = false,
                            EmployerId = "88aec81d-b5b0-43f3-8721-8d21560b0288",
                            LockoutEnabled = false,
                            PasswordHash = "EtoHash",
                            PhoneNumberConfirmed = false,
                            Role = "Employer",
                            SecurityStamp = "b3cd6bee-a352-4059-b8d2-3fb040f92384",
                            TwoFactorEnabled = false,
                            UserName = "Мария"
                        },
                        new
                        {
                            Id = "88aec81d-b5b0-45f3-8721-8d41560b0666",
                            AccessFailedCount = 0,
                            ApplicantId = "88aec81d-b5b0-45f3-0721-1241560b02fa",
                            ConcurrencyStamp = "c655ad97-9897-4d13-a0a8-bfbba9ddfcd7",
                            Email = "max@mail.ru",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "EtoHash",
                            PhoneNumberConfirmed = false,
                            Role = "Applicant",
                            SecurityStamp = "091d4eab-199c-4a73-bb4a-f061a00cc6ea",
                            TwoFactorEnabled = false,
                            UserName = "Максим"
                        },
                        new
                        {
                            Id = "88aec81d-b5b0-45f3-8721-8d41560b0777",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "fafcb544-97ea-4a71-8841-592dcaf6b780",
                            Email = "dima@mail.ru",
                            EmailConfirmed = false,
                            EmployerId = "88aec81d-b5b0-43f3-8721-8d21560b02a9",
                            LockoutEnabled = false,
                            PasswordHash = "EtoHash",
                            PhoneNumberConfirmed = false,
                            Role = "Employer",
                            SecurityStamp = "10934c78-6cf7-4f67-b768-ff3a32e1aebd",
                            TwoFactorEnabled = false,
                            UserName = "Дмитрий"
                        },
                        new
                        {
                            Id = "88aec81d-b5b0-45f3-8721-8d41560b0888",
                            AccessFailedCount = 0,
                            ApplicantId = "88aec81d-b5b0-45f3-0721-1241560b02fb",
                            ConcurrencyStamp = "fe1e4e8a-d312-42ad-9075-8299f5fc0085",
                            Email = "olga@mail.ru",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "EtoHash",
                            PhoneNumberConfirmed = false,
                            Role = "Applicant",
                            SecurityStamp = "5032af0e-ecd7-4ef5-9ba4-3745de7577dc",
                            TwoFactorEnabled = false,
                            UserName = "Ольга"
                        },
                        new
                        {
                            Id = "88aec81d-b5b0-45f3-8721-8d41560b0999",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e4dd43f0-5090-44df-aef1-6d906af01eac",
                            Email = "sergey@mail.ru",
                            EmailConfirmed = false,
                            EmployerId = "88aec81d-b5b0-43f3-8721-8d21560b02b0",
                            LockoutEnabled = false,
                            PasswordHash = "EtoHash",
                            PhoneNumberConfirmed = false,
                            Role = "Employer",
                            SecurityStamp = "87d94a53-3887-43e6-b245-10a43f5cceed",
                            TwoFactorEnabled = false,
                            UserName = "Сергей"
                        });
                });

            modelBuilder.Entity("Models.ModelsIdentity.IdentityAuth.Employer", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("CommentsCount")
                        .HasColumnType("integer");

                    b.Property<string>("CompanyName")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int>("PostsCount")
                        .HasColumnType("integer");

                    b.Property<int>("RatingCount")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Employer");

                    b.HasData(
                        new
                        {
                            Id = "88aec81d-b5b0-43f3-8721-8d21560b02a7",
                            CommentsCount = 0,
                            CompanyName = "РазрабыМы",
                            Description = "Разработка платформ",
                            PostsCount = 0,
                            RatingCount = 0
                        },
                        new
                        {
                            Id = "88aec81d-b5b0-43f3-8721-8d21560b02a8",
                            CommentsCount = 0,
                            CompanyName = "ООО 'Аврора'",
                            Description = "Производство строительных материалов",
                            PostsCount = 0,
                            RatingCount = 0
                        },
                        new
                        {
                            Id = "88aec81d-b5b0-43f3-8721-8d21560b0288",
                            CommentsCount = 0,
                            CompanyName = "ТрансЛогистика",
                            Description = "Транспортная компания",
                            PostsCount = 0,
                            RatingCount = 0
                        },
                        new
                        {
                            Id = "88aec81d-b5b0-43f3-8721-8d21560b02a9",
                            CommentsCount = 0,
                            CompanyName = "Здоровье",
                            Description = "Медицинский центр",
                            PostsCount = 0,
                            RatingCount = 0
                        },
                        new
                        {
                            Id = "88aec81d-b5b0-43f3-8721-8d21560b02b0",
                            CommentsCount = 0,
                            CompanyName = "Юристы-Правозащитники",
                            Description = "Юридическая компания",
                            PostsCount = 0,
                            RatingCount = 0
                        });
                });

            modelBuilder.Entity("Models.ModelsIdentity.IdentityAuth.Gender", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("GenderName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Gender");

                    b.HasData(
                        new
                        {
                            Id = "18aec81d-b5b0-45f3-1721-8d41560b02f1",
                            GenderName = "Мужской"
                        },
                        new
                        {
                            Id = "28aec81d-b5b0-45f3-1721-8d41560b02f1",
                            GenderName = "Женский"
                        });
                });

            modelBuilder.Entity("Models.ModelsIdentity.IdentityAuth.Resume", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ApplicantId")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Education")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("GenderId")
                        .HasColumnType("text");

                    b.Property<string>("Middlename")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<double>("Salary")
                        .HasColumnType("double precision");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("WorkExperience")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ApplicantId");

                    b.HasIndex("GenderId");

                    b.ToTable("Resume");

                    b.HasData(
                        new
                        {
                            Id = "88aec81d-b5b0-45f3-1721-8d41560b02f1",
                            ApplicantId = "88aec81d-b5b0-45f3-0721-1241560b01f7",
                            Description = "С 2020 года самостоятельно изучаю C#",
                            Education = "Университет управления 'ТИСБИ', Казань, ИТ, Программная инженерия",
                            Email = "dementiev12@mail.ru",
                            GenderId = "18aec81d-b5b0-45f3-1721-8d41560b02f1",
                            Middlename = "Петрович",
                            Name = "Ваня",
                            PhoneNumber = "+79242453413",
                            Salary = 45000.0,
                            Surname = "Дементьев",
                            WorkExperience = "20.11.2019 - 20.09.2022 Завод имени Ленина"
                        },
                        new
                        {
                            Id = "88aec81d-b5b0-45f3-1721-8d41560b02f2",
                            ApplicantId = "88aec81d-b5b0-45f3-0721-1241560b02f8",
                            Description = "Опыт работы с Java, C++ и Python",
                            Education = "Московский государственный технический университет им. Баумана, Москва, Информатика и вычислительная техника",
                            Email = "ivan2@mail.ru",
                            GenderId = "18aec81d-b5b0-45f3-1721-8d41560b02f1",
                            Middlename = "Сергеевич",
                            Name = "Иван",
                            PhoneNumber = "+79123456789",
                            Salary = 55000.0,
                            Surname = "Иванов",
                            WorkExperience = "01.02.2020 - 01.09.2022 ООО 'Рога и копыта'"
                        },
                        new
                        {
                            Id = "88aec81d-b5b0-45f3-1721-8d41560b02f3",
                            ApplicantId = "88aec81d-b5b0-45f3-0721-1241560b02f9",
                            Description = "Опыт работы в веб-разработке с HTML, CSS, JavaScript",
                            Education = "Университет ИТМО, Санкт-Петербург, Информационные системы и технологии",
                            Email = "anna3@mail.ru",
                            GenderId = "18aec81d-b5b0-45f3-1721-8d41560b02f1",
                            Middlename = "Ивановна",
                            Name = "Анна",
                            PhoneNumber = "+79090909090",
                            Salary = 65000.0,
                            Surname = "Петрова",
                            WorkExperience = "15.09.2020 - 10.03.2023 ООО 'Красный Октябрь'"
                        },
                        new
                        {
                            Id = "88aec81d-b5b0-45f3-1721-8d41560b02f4",
                            ApplicantId = "88aec81d-b5b0-45f3-0721-1241560b02fa",
                            Description = "Опыт работы с Python и MATLAB",
                            Education = "Московский государственный университет им. М.В. Ломоносова, Москва, Факультет прикладной математики и информатики",
                            Email = "sergey4@mail.ru",
                            GenderId = "18aec81d-b5b0-45f3-1721-8d41560b02f1",
                            Middlename = "Петрович",
                            Name = "Сергей",
                            PhoneNumber = "+79001234567",
                            Salary = 50000.0,
                            Surname = "Сидоров",
                            WorkExperience = "01.10.2019 - 01.09.2022 ООО 'Рога и копыта'"
                        },
                        new
                        {
                            Id = "88aec81d-b5b0-45f3-1721-8d41560b02f5",
                            ApplicantId = "88aec81d-b5b0-45f3-0721-1241560b02fb",
                            Description = "Опыт работы в разработке мобильных приложений на Java и Kotlin",
                            Education = "Университет ИТМО, Санкт-Петербург, Информатика и вычислительная техника",
                            Email = "marya5@mail.ru",
                            GenderId = "18aec81d-b5b0-45f3-1721-8d41560b02f1",
                            Middlename = "Сергеевна",
                            Name = "Мария",
                            PhoneNumber = "+79123456789",
                            Salary = 60000.0,
                            Surname = "Кузнецова",
                            WorkExperience = "01.09.2020 - 01.03.2023 ООО 'Рога и копыта'"
                        });
                });

            modelBuilder.Entity("BlogSN.Models.Post", b =>
                {
                    b.HasOne("BlogSN.Models.Category", "Category")
                        .WithMany("Posts")
                        .HasForeignKey("CategoryId");

                    b.HasOne("Models.ModelsIdentity.IdentityAuth.Employer", "Employer")
                        .WithMany("Posts")
                        .HasForeignKey("EmployerId");

                    b.Navigation("Category");

                    b.Navigation("Employer");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Models.ModelsIdentity.IdentityAuth.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Models.ModelsIdentity.IdentityAuth.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.ModelsIdentity.IdentityAuth.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Models.ModelsIdentity.IdentityAuth.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Models.ModelsBlogSN.Comment", b =>
                {
                    b.HasOne("Models.ModelsIdentity.IdentityAuth.Applicant", "Applicant")
                        .WithMany("Comments")
                        .HasForeignKey("ApplicantId");

                    b.HasOne("Models.ModelsIdentity.IdentityAuth.Employer", "Employer")
                        .WithMany("Comments")
                        .HasForeignKey("EmployerId");

                    b.Navigation("Applicant");

                    b.Navigation("Employer");
                });

            modelBuilder.Entity("Models.ModelsBlogSN.Feedback", b =>
                {
                    b.HasOne("Models.ModelsIdentity.IdentityAuth.Applicant", "Applicant")
                        .WithMany("Feedbacks")
                        .HasForeignKey("ApplicantId");

                    b.HasOne("BlogSN.Models.Post", "Post")
                        .WithMany("Feedbacks")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Applicant");

                    b.Navigation("Post");
                });

            modelBuilder.Entity("Models.ModelsBlogSN.Rating", b =>
                {
                    b.HasOne("Models.ModelsIdentity.IdentityAuth.Applicant", "Applicant")
                        .WithMany("Ratings")
                        .HasForeignKey("ApplicantId");

                    b.HasOne("Models.ModelsIdentity.IdentityAuth.Employer", "Employer")
                        .WithMany("Rating")
                        .HasForeignKey("EmployerId");

                    b.Navigation("Applicant");

                    b.Navigation("Employer");
                });

            modelBuilder.Entity("Models.ModelsIdentity.IdentityAuth.ApplicationUser", b =>
                {
                    b.HasOne("Models.ModelsIdentity.IdentityAuth.Applicant", "Applicant")
                        .WithOne("User")
                        .HasForeignKey("Models.ModelsIdentity.IdentityAuth.ApplicationUser", "ApplicantId");

                    b.HasOne("Models.ModelsIdentity.IdentityAuth.Employer", "Employer")
                        .WithOne("User")
                        .HasForeignKey("Models.ModelsIdentity.IdentityAuth.ApplicationUser", "EmployerId");

                    b.Navigation("Applicant");

                    b.Navigation("Employer");
                });

            modelBuilder.Entity("Models.ModelsIdentity.IdentityAuth.Resume", b =>
                {
                    b.HasOne("Models.ModelsIdentity.IdentityAuth.Applicant", "Applicant")
                        .WithMany("Resumes")
                        .HasForeignKey("ApplicantId");

                    b.HasOne("Models.ModelsIdentity.IdentityAuth.Gender", "Gender")
                        .WithMany()
                        .HasForeignKey("GenderId");

                    b.Navigation("Applicant");

                    b.Navigation("Gender");
                });

            modelBuilder.Entity("BlogSN.Models.Category", b =>
                {
                    b.Navigation("Posts");
                });

            modelBuilder.Entity("BlogSN.Models.Post", b =>
                {
                    b.Navigation("Feedbacks");
                });

            modelBuilder.Entity("Models.ModelsIdentity.IdentityAuth.Applicant", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Feedbacks");

                    b.Navigation("Ratings");

                    b.Navigation("Resumes");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Models.ModelsIdentity.IdentityAuth.Employer", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Posts");

                    b.Navigation("Rating");

                    b.Navigation("User");
                });
#pragma warning restore 612, 618
        }
    }
}
