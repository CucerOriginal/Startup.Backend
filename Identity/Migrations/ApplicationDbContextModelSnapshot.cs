// <auto-generated />
using System;
using Identity.DbContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Identity.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("BlogSN.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Category");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "ИТ",
                            Name = "ИТ"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Транспорт",
                            Name = "Транспорт"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Закупки",
                            Name = "Закупки"
                        },
                        new
                        {
                            Id = 4,
                            Description = "Финансы",
                            Name = "Финансы"
                        },
                        new
                        {
                            Id = 5,
                            Description = "Медицина",
                            Name = "Медицина"
                        },
                        new
                        {
                            Id = 6,
                            Description = "Рабочий персонал",
                            Name = "Рабочий персонал"
                        },
                        new
                        {
                            Id = 7,
                            Description = "Юристы",
                            Name = "Юристы"
                        });
                });

            modelBuilder.Entity("BlogSN.Models.Post", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("CategoryId")
                        .HasColumnType("integer");

                    b.Property<string>("Content")
                        .HasColumnType("text");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("EmployerId")
                        .HasColumnType("text");

                    b.Property<double>("Salary")
                        .HasColumnType("double precision");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("EmployerId");

                    b.ToTable("Post");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 1,
                            Content = "Что от Вас требуется? Знание основ SQL, 1С (выбор, связи, вложенные запросы); Аналитический склад ума; Стремление к саморазвитию; Инициативность, желание искать новые инструменты и пути решения поставленных задач.",
                            DateCreated = new DateTime(2023, 4, 22, 13, 29, 12, 533, DateTimeKind.Utc).AddTicks(4779),
                            Description = "Требуемый опыт работы: 1–3 года Полная занятость, полный день",
                            EmployerId = "88aec81d-b5b0-43f3-8721-8d21560b02a7",
                            Salary = 40000.0,
                            Title = "Младший программист"
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 1,
                            Content = "Требования: - C# + .NET 4.7 с опытом разработки не менее 2 лет - ООП - уверенное владение. - Опыт разработки desktop приложений (Windows). - Многопоточные приложения - уверенное владение. - WPF - уверенное владение - знание MVVM, понимание принципов SOLID, DI Будет плюсом: WinForms, Unity, Prism",
                            DateCreated = new DateTime(2023, 4, 22, 13, 29, 12, 533, DateTimeKind.Utc).AddTicks(4783),
                            Description = "Требуемый опыт работы: 1–3 года Полная занятость, гибкий график",
                            EmployerId = "88aec81d-b5b0-43f3-8721-8d21560b02a7",
                            Salary = 100000.0,
                            Title = "Программист С# (middle)"
                        },
                        new
                        {
                            Id = 3,
                            CategoryId = 1,
                            Content = "Требования: Уверенные знания C#; Знание ASP.NET Core; Знание SQL, опыт работы с MSSQL, PostgreSQL; Entity Framework Core; Понимание ООП; Знать и применять на практике шаблоны проектирования; Опыт разработки REST API; Опыт работы с GIT.",
                            DateCreated = new DateTime(2023, 4, 22, 13, 29, 12, 533, DateTimeKind.Utc).AddTicks(4784),
                            Description = "Требуемый опыт работы: 1–3 года Полная занятость, удаленная работа",
                            EmployerId = "88aec81d-b5b0-43f3-8721-8d21560b02a7",
                            Salary = 160000.0,
                            Title = "Разработчик C# (Middle)"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Models.ModelsBlogSN.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ApplicantId")
                        .HasColumnType("text");

                    b.Property<string>("Content")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("EmployerId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ApplicantId");

                    b.HasIndex("EmployerId");

                    b.ToTable("Comment");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ApplicantId = "88aec81d-b5b0-45f3-0721-1241560b01f7",
                            Content = "Норм тема",
                            CreatedDate = new DateTime(2023, 4, 22, 13, 29, 12, 533, DateTimeKind.Utc).AddTicks(4805),
                            EmployerId = "88aec81d-b5b0-43f3-8721-8d21560b02a7"
                        });
                });

            modelBuilder.Entity("Models.ModelsBlogSN.Feedback", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ApplicantId")
                        .HasColumnType("text");

                    b.Property<int>("PostId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ApplicantId");

                    b.HasIndex("PostId");

                    b.ToTable("Feedback");

                    b.HasData(
                        new
                        {
                            Id = "188aec81d-b5b0-45f3-0721-1241560b01f7",
                            ApplicantId = "88aec81d-b5b0-45f3-0721-1241560b01f7",
                            PostId = 1
                        });
                });

            modelBuilder.Entity("Models.ModelsBlogSN.Rating", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ApplicantId")
                        .HasColumnType("text");

                    b.Property<string>("EmployerId")
                        .HasColumnType("text");

                    b.Property<bool>("LikeStatus")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("ApplicantId");

                    b.HasIndex("EmployerId");

                    b.ToTable("Rating");

                    b.HasData(
                        new
                        {
                            Id = "188aec81d-b5b0-45f3-8721-8d41560b02f7",
                            ApplicantId = "88aec81d-b5b0-45f3-0721-1241560b01f7",
                            EmployerId = "88aec81d-b5b0-43f3-8721-8d21560b02a7",
                            LikeStatus = true
                        });
                });

            modelBuilder.Entity("Models.ModelsIdentity.IdentityAuth.Applicant", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Requisite")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Applicant");

                    b.HasData(
                        new
                        {
                            Id = "88aec81d-b5b0-45f3-0721-1241560b01f7"
                        });
                });

            modelBuilder.Entity("Models.ModelsIdentity.IdentityAuth.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ApplicantId")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("EmployerId")
                        .HasColumnType("text");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("Role")
                        .HasColumnType("text");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("ApplicantId")
                        .IsUnique();

                    b.HasIndex("EmployerId")
                        .IsUnique();

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "88aec81d-b5b0-45f3-8721-8d41560b02f7",
                            AccessFailedCount = 0,
                            ApplicantId = "88aec81d-b5b0-45f3-0721-1241560b01f7",
                            ConcurrencyStamp = "f6d1b285-fabe-4f5d-8e1b-b0793fee780a",
                            Email = "1@mail.ru",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "EtoHash",
                            PhoneNumberConfirmed = false,
                            Role = "Applicant",
                            SecurityStamp = "d7c80b33-8f3f-4dd5-8cc3-1cd0ab2fbad0",
                            TwoFactorEnabled = false,
                            UserName = "Vanya"
                        },
                        new
                        {
                            Id = "88aec81d-b5b0-45f3-8721-8d41560b0111",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d9d72123-602c-4e98-a95c-0a98c7cd4105",
                            Email = "321@mail.ru",
                            EmailConfirmed = false,
                            EmployerId = "88aec81d-b5b0-43f3-8721-8d21560b02a7",
                            LockoutEnabled = false,
                            PasswordHash = "EtoHash",
                            PhoneNumberConfirmed = false,
                            Role = "Employer",
                            SecurityStamp = "f089199f-92b7-4db2-91d0-4670ff382f81",
                            TwoFactorEnabled = false,
                            UserName = "Ivan"
                        });
                });

            modelBuilder.Entity("Models.ModelsIdentity.IdentityAuth.Employer", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("CommentsCount")
                        .HasColumnType("integer");

                    b.Property<string>("CompanyName")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int>("PostsCount")
                        .HasColumnType("integer");

                    b.Property<int>("RatingCount")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Employer");

                    b.HasData(
                        new
                        {
                            Id = "88aec81d-b5b0-43f3-8721-8d21560b02a7",
                            CommentsCount = 0,
                            CompanyName = "КГС",
                            Description = "Интернет провайдер",
                            PostsCount = 0,
                            RatingCount = 0
                        });
                });

            modelBuilder.Entity("Models.ModelsIdentity.IdentityAuth.Gender", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("GenderName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Gender");

                    b.HasData(
                        new
                        {
                            Id = "18aec81d-b5b0-45f3-1721-8d41560b02f1",
                            GenderName = "Мужской"
                        },
                        new
                        {
                            Id = "28aec81d-b5b0-45f3-1721-8d41560b02f1",
                            GenderName = "Женский"
                        });
                });

            modelBuilder.Entity("Models.ModelsIdentity.IdentityAuth.Resume", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ApplicantId")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Education")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("GenderId")
                        .HasColumnType("text");

                    b.Property<string>("Middlename")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<double>("Salary")
                        .HasColumnType("double precision");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("WorkExperience")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ApplicantId");

                    b.HasIndex("GenderId");

                    b.ToTable("Resume");

                    b.HasData(
                        new
                        {
                            Id = "88aec81d-b5b0-45f3-1721-8d41560b02f1",
                            ApplicantId = "88aec81d-b5b0-45f3-0721-1241560b01f7",
                            Description = "С 2020 года самостоятельно изучаю C#",
                            Education = "Университет управления 'ТИСБИ', Казань, ИТ, Программная инженерия",
                            Email = "1@mail.ru",
                            GenderId = "18aec81d-b5b0-45f3-1721-8d41560b02f1",
                            Middlename = "Petrovich",
                            Name = "Vanya",
                            PhoneNumber = "+79242453413",
                            Salary = 45000.0,
                            Surname = "Dementiev",
                            WorkExperience = "20.11.2019 - 20.09.2022 Завод имени Ленина"
                        });
                });

            modelBuilder.Entity("BlogSN.Models.Post", b =>
                {
                    b.HasOne("BlogSN.Models.Category", "Category")
                        .WithMany("Posts")
                        .HasForeignKey("CategoryId");

                    b.HasOne("Models.ModelsIdentity.IdentityAuth.Employer", "Employer")
                        .WithMany("Posts")
                        .HasForeignKey("EmployerId");

                    b.Navigation("Category");

                    b.Navigation("Employer");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Models.ModelsIdentity.IdentityAuth.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Models.ModelsIdentity.IdentityAuth.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.ModelsIdentity.IdentityAuth.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Models.ModelsIdentity.IdentityAuth.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Models.ModelsBlogSN.Comment", b =>
                {
                    b.HasOne("Models.ModelsIdentity.IdentityAuth.Applicant", "Applicant")
                        .WithMany("Comments")
                        .HasForeignKey("ApplicantId");

                    b.HasOne("Models.ModelsIdentity.IdentityAuth.Employer", "Employer")
                        .WithMany("Comments")
                        .HasForeignKey("EmployerId");

                    b.Navigation("Applicant");

                    b.Navigation("Employer");
                });

            modelBuilder.Entity("Models.ModelsBlogSN.Feedback", b =>
                {
                    b.HasOne("Models.ModelsIdentity.IdentityAuth.Applicant", "Applicant")
                        .WithMany("Feedbacks")
                        .HasForeignKey("ApplicantId");

                    b.HasOne("BlogSN.Models.Post", "Post")
                        .WithMany("Feedbacks")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Applicant");

                    b.Navigation("Post");
                });

            modelBuilder.Entity("Models.ModelsBlogSN.Rating", b =>
                {
                    b.HasOne("Models.ModelsIdentity.IdentityAuth.Applicant", "Applicant")
                        .WithMany("Ratings")
                        .HasForeignKey("ApplicantId");

                    b.HasOne("Models.ModelsIdentity.IdentityAuth.Employer", "Employer")
                        .WithMany("Rating")
                        .HasForeignKey("EmployerId");

                    b.Navigation("Applicant");

                    b.Navigation("Employer");
                });

            modelBuilder.Entity("Models.ModelsIdentity.IdentityAuth.ApplicationUser", b =>
                {
                    b.HasOne("Models.ModelsIdentity.IdentityAuth.Applicant", "Applicant")
                        .WithOne("User")
                        .HasForeignKey("Models.ModelsIdentity.IdentityAuth.ApplicationUser", "ApplicantId");

                    b.HasOne("Models.ModelsIdentity.IdentityAuth.Employer", "Employer")
                        .WithOne("User")
                        .HasForeignKey("Models.ModelsIdentity.IdentityAuth.ApplicationUser", "EmployerId");

                    b.Navigation("Applicant");

                    b.Navigation("Employer");
                });

            modelBuilder.Entity("Models.ModelsIdentity.IdentityAuth.Resume", b =>
                {
                    b.HasOne("Models.ModelsIdentity.IdentityAuth.Applicant", "Applicant")
                        .WithMany("Resumes")
                        .HasForeignKey("ApplicantId");

                    b.HasOne("Models.ModelsIdentity.IdentityAuth.Gender", "Gender")
                        .WithMany()
                        .HasForeignKey("GenderId");

                    b.Navigation("Applicant");

                    b.Navigation("Gender");
                });

            modelBuilder.Entity("BlogSN.Models.Category", b =>
                {
                    b.Navigation("Posts");
                });

            modelBuilder.Entity("BlogSN.Models.Post", b =>
                {
                    b.Navigation("Feedbacks");
                });

            modelBuilder.Entity("Models.ModelsIdentity.IdentityAuth.Applicant", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Feedbacks");

                    b.Navigation("Ratings");

                    b.Navigation("Resumes");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Models.ModelsIdentity.IdentityAuth.Employer", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Posts");

                    b.Navigation("Rating");

                    b.Navigation("User");
                });
#pragma warning restore 612, 618
        }
    }
}
